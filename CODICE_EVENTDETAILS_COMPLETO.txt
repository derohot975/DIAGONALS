================================================================================
CODICE COMPLETO - EVENT DETAILS SCREEN E DIPENDENZE
================================================================================

================================================================================
1. client/src/components/screens/EventDetailsScreen.tsx
================================================================================

import { Plus, EyeOff, Star, Award, Eye, ArrowLeft, Home, Trash2, Save } from '@/components/icons';
import { WineEvent, Wine, Vote, User } from '@shared/schema';
import { formatPrice } from '../../lib/utils';
import { VotingGrid } from '../optimized/VotingGrid';
import { useEventLogic } from '../../hooks/useEventLogic';
import diagoLogo from '@assets/diagologo.png';

interface EventDetailsScreenProps {
  event: WineEvent | null;
  wines: Wine[];
  votes: Vote[];
  users: User[];
  currentUser: User | null;
  onShowWineRegistrationModal: () => void;
  onVoteForWine: (wineId: number, score: number, hasLode: boolean) => void;
  onCompleteEvent: (eventId: number) => void;
  onShowResults: (eventId: number) => void;
  onParticipateEvent: (eventId: number) => void;
  onGoBack?: () => void;
  onGoHome?: () => void;
}

export default function EventDetailsScreen({
  event,
  wines,
  votes,
  users,
  currentUser,
  onShowWineRegistrationModal,
  onVoteForWine,
  onCompleteEvent,
  onShowResults,
  onParticipateEvent,
  onGoBack,
  onGoHome
}: EventDetailsScreenProps) {
  if (!event || !currentUser) return null;

  // Use optimized event logic hook
  const { 
    eventWines, 
    userHasRegisteredWine, 
    votingIsActive, 
    getUserVoteForWine, 
    getWineContributor,
    getEventProgress 
  } = useEventLogic({ event, wines, votes, users, currentUser });

  const progress = getEventProgress();

  return (
    <div className="flex-1 flex flex-col">
      {/* Logo Header */}
      <div className="flex-shrink-0 flex justify-center pt-8 pb-6">
        <img 
          src={diagoLogo} 
          alt="DIAGO Logo" 
          className="mx-auto mb-2 w-24 h-auto logo-filter drop-shadow-lg" 
        />
      </div>

      {/* Scrollable Content */}
      <div 
        className="overflow-y-auto px-4 pb-4" 
        style={{
          height: 'calc(100dvh - 120px - var(--bottom-nav-total, 88px) - env(safe-area-inset-top, 0px))'
        }}
      >
        <div className="max-w-4xl mx-auto space-y-4">
        <div className="glass-effect rounded-2xl shadow-2xl p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="event-name-script text-xl font-bold text-[#300505] whitespace-nowrap overflow-hidden text-ellipsis max-w-sm">{event.name}</h2>
              <p className="text-gray-600">{event.date} - Modalit√† {event.mode}</p>
            </div>
            <div className="flex items-center space-x-2">
              <span className="bg-green-500 text-white px-3 py-1 rounded-full text-sm font-medium">ATTIVO</span>
            </div>
          </div>

          {/* PULSANTE UNICO CONDIZIONALE */}
          <div className="mt-6">
            {!userHasRegisteredWine ? (
              <button
                onClick={onShowWineRegistrationModal}
                className="w-full bg-[#8d0303] hover:bg-[#300505] text-white px-6 py-4 rounded-xl flex items-center justify-center space-x-2 transition-colors text-lg font-semibold"
              >
                <Plus className="w-5 h-5" />
                <span>REGISTRA IL TUO VINO</span>
              </button>
            ) : (
              <button
                onClick={() => votingIsActive ? onParticipateEvent(event.id) : null}
                disabled={!votingIsActive}
                className={`w-full px-6 py-4 rounded-xl flex items-center justify-center space-x-2 transition-all text-lg font-semibold ${
                  votingIsActive 
                    ? 'bg-gradient-to-r from-[#300505] to-[#8d0303] hover:from-[#240404] hover:to-[#a00404] text-white shadow-lg hover:scale-105' 
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed opacity-60'
                }`}
              >
                <Eye className="w-5 h-5" />
                <span>{votingIsActive ? 'PARTECIPA ALLA DIAGONALE' : 'ATTENDI ATTIVAZIONE VOTAZIONI'}</span>
              </button>
            )}
          </div>
          
          {eventWines.length === 0 ? (
            <div className="text-center py-12">
              <Plus className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500 text-lg">Nessun vino registrato</p>
              <p className="text-gray-400 text-sm">Aggiungi il primo vino per iniziare la degustazione</p>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
                {eventWines.map(wine => {
                  const userVote = getUserVoteForWine(wine.id);
                  const contributor = getWineContributor(wine.userId);
                  
                  return (
                    <div key={wine.id} className="bg-white rounded-xl p-4 border-2 border-[hsl(229,73%,69%)]/20 wine-card-hover">
                      <div className="flex items-center justify-between mb-3">
                        <h3 className="font-semibold text-lg text-gray-800">
                          {wine.name}
                        </h3>
                        <div className="flex items-center space-x-2">
                          <span className="bg-[hsl(43,96%,56%)] text-white px-2 py-1 rounded-full text-xs">
                            {formatPrice(parseFloat(wine.price))}
                          </span>
                          <Eye className="w-4 h-4 text-gray-600" />
                        </div>
                      </div>
                      <p className="text-gray-600 text-sm mb-4">
                        Portato da: <span className="font-medium">{contributor}</span>
                      </p>
                      
                      <div className="space-y-3">
                        <div className="flex items-center justify-between">
                          <span className="text-sm font-medium text-gray-700">Il tuo voto:</span>
                          {userVote ? (
                            <div className="flex items-center space-x-1">
                              <Star className="w-4 h-4 text-[hsl(43,96%,56%)]" />
                              <span className="text-sm font-medium">{parseFloat(userVote.score.toString()).toFixed(1)}</span>
                            </div>
                          ) : (
                            <span className="text-sm text-gray-500">Non votato</span>
                          )}
                        </div>
                        
                        <VotingGrid
                          currentScore={parseFloat(userVote?.score?.toString() || '0')}
                          onScore={(score) => onVoteForWine(wine.id, score, false)}
                        />
                        
                        <div className="text-center text-xs text-gray-500 mt-2">
                          Voti da 1 a 10 con step 0.5
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
              
              <div className="flex items-center justify-between bg-gray-50 rounded-xl p-4">
                <div className="flex items-center space-x-4">
                  <span className="text-sm text-gray-600">Progresso:</span>
                  <div className="flex items-center space-x-2">
                    <div className="w-32 bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-[hsl(229,73%,69%)] h-2 rounded-full transition-all duration-300" 
                        style={{ width: `${progress}%` }}
                      ></div>
                    </div>
                    <span className="text-sm font-medium text-gray-700">{progress}%</span>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => onShowResults(event.id)}
                    className="bg-[hsl(43,96%,56%)] hover:bg-yellow-600 text-white px-4 py-2 rounded-xl transition-colors"
                  >
                    Mostra Risultati
                  </button>
                  <button
                    onClick={() => onCompleteEvent(event.id)}
                    className="bg-[hsl(0,84.2%,60.2%)] hover:bg-red-700 text-white px-4 py-2 rounded-xl transition-colors"
                  >
                    Termina Evento
                  </button>
                </div>
              </div>
            </>
          )}
        </div>
      </div>
      
      {/* Navigation Buttons */}
      {onGoBack && (
        <div className="fixed left-4 z-50" style={{bottom: 'var(--bottom-nav-offset)'}}>
          <button
            onClick={onGoBack}
            className="bg-[hsl(229,73%,69%)] hover:bg-[hsl(270,50%,65%)] text-white p-3 rounded-full shadow-lg transition-all"
          >
            <ArrowLeft className="w-5 h-5" />
          </button>
        </div>
      )}
      
      {onGoHome && (
        <div className="fixed right-4 z-50" style={{bottom: 'var(--bottom-nav-offset)'}}>
          <button
            onClick={onGoHome}
            className="bg-[hsl(229,73%,69%)] hover:bg-[hsl(270,50%,65%)] text-white p-3 rounded-full shadow-lg transition-all"
            title="Torna alla Home"
          >
            <Home className="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
    </div>
  );
}

================================================================================
2. client/src/hooks/useEventLogic.ts
================================================================================

import { useMemo, useCallback } from 'react';
import { WineEvent, Wine, Vote, User } from '@shared/schema';

interface UseEventLogicProps {
  event: WineEvent | null;
  wines: Wine[];
  votes: Vote[];
  users: User[];
  currentUser: User | null;
}

export const useEventLogic = ({ event, wines, votes, users, currentUser }: UseEventLogicProps) => {
  // Memoized calculations to prevent unnecessary re-renders
  const eventWines = useMemo(() => 
    wines.filter(wine => wine.eventId === event?.id),
    [wines, event?.id]
  );

  const userHasRegisteredWine = useMemo(() => 
    currentUser ? eventWines.some(wine => wine.userId === currentUser.id) : false,
    [eventWines, currentUser?.id]
  );

  const votingIsActive = useMemo(() => 
    event?.votingStatus === 'active',
    [event?.votingStatus]
  );

  // Memoized helper functions
  const getUserVoteForWine = useCallback((wineId: number) => {
    if (!currentUser) return undefined;
    return votes.find(vote => vote.wineId === wineId && vote.userId === currentUser.id);
  }, [votes, currentUser?.id]);

  const getWineContributor = useCallback((userId: number) => {
    return users.find(u => u.id === userId)?.name || 'Unknown';
  }, [users]);

  const getEventProgress = useCallback(() => {
    if (eventWines.length === 0) return 0;
    const totalPossibleVotes = eventWines.length * users.length;
    const actualVotes = votes.filter(vote => 
      eventWines.some(wine => wine.id === vote.wineId)
    ).length;
    return Math.round((actualVotes / totalPossibleVotes) * 100);
  }, [eventWines, users, votes]);

  return {
    eventWines,
    userHasRegisteredWine,
    votingIsActive,
    getUserVoteForWine,
    getWineContributor,
    getEventProgress
  };
};

================================================================================
3. client/src/components/optimized/VotingGrid.tsx
================================================================================

import { memo } from 'react';
import { ScoreButton } from './ScoreButton';

interface VotingGridProps {
  currentScore?: number;
  onScore: (score: number) => void;
}

const scoreRanges = [
  [1, 1.5, 2, 2.5, 3],
  [3.5, 4, 4.5, 5, 5.5],
  [6, 6.5, 7, 7.5, 8],
  [8.5, 9, 9.5, 10]
];

export const VotingGrid = memo(({ currentScore, onScore }: VotingGridProps) => (
  <div className="space-y-2">
    {scoreRanges.map((range, index) => (
      <div 
        key={index} 
        className={`grid gap-1 ${index === 3 ? 'grid-cols-4' : 'grid-cols-5'}`}
      >
        {range.map(score => (
          <ScoreButton
            key={score}
            score={score}
            currentScore={currentScore}
            onScore={onScore}
          />
        ))}
      </div>
    ))}
  </div>
));

================================================================================
4. client/src/lib/queryClient.ts
================================================================================

import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey.join("/") as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});

================================================================================
5. shared/schema.ts
================================================================================

import { pgTable, text, serial, integer, boolean, timestamp, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  pin: text("pin").notNull(), // PIN a 4 cifre per autenticazione
  isAdmin: boolean("is_admin").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const wineEvents = pgTable("wine_events", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  date: text("date").notNull(),
  mode: text("mode").notNull(), // Modalit√† unica
  status: text("status").default('registration').notNull(), // 'registration', 'voting', 'completed'
  votingStatus: text("voting_status").notNull().default('not_started'), // 'not_started', 'active', 'completed'
  createdBy: integer("created_by").references(() => users.id).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const wines = pgTable("wines", {
  id: serial("id").primaryKey(),
  eventId: integer("event_id").references(() => wineEvents.id).notNull(),
  userId: integer("user_id").references(() => users.id).notNull(),
  type: text("type").notNull(), // 'Bianco', 'Rosso', 'Bollicina'
  name: text("name").notNull(),
  producer: text("producer").notNull(),
  grape: text("grape").notNull(), // Vitigno
  year: integer("year").notNull(),
  origin: text("origin").notNull(),
  price: decimal("price", { precision: 10, scale: 2 }).notNull(),
  alcohol: decimal("alcohol", { precision: 4, scale: 1 }), // Gradazione alcolica opzionale
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const votes = pgTable("votes", {
  id: serial("id").primaryKey(),
  eventId: integer("event_id").references(() => wineEvents.id).notNull(),
  wineId: integer("wine_id").references(() => wines.id).notNull(),
  userId: integer("user_id").references(() => users.id).notNull(),
  score: decimal("score", { precision: 3, scale: 1 }).notNull(), // Supporta voti con .5 (es: 7.5)
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export const eventReports = pgTable("event_reports", {
  id: serial("id").primaryKey(),
  eventId: integer("event_id").references(() => wineEvents.id).notNull(),
  reportData: text("report_data").notNull(), // JSON stringified report
  generatedAt: timestamp("generated_at").defaultNow().notNull(),
  generatedBy: integer("generated_by").references(() => users.id).notNull(),
});



// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
});

export const insertWineEventSchema = createInsertSchema(wineEvents).omit({
  id: true,
  createdAt: true,
});

export const insertWineSchema = createInsertSchema(wines).omit({
  id: true,
  createdAt: true,
}).extend({
  alcohol: z.union([z.string(), z.number()]).optional().transform((val) => {
    if (val === null || val === undefined) return undefined;
    return typeof val === 'number' ? val.toString() : val;
  })
});

export const insertVoteSchema = createInsertSchema(votes).omit({
  id: true,
  createdAt: true,
}).extend({
  score: z.number().min(1).max(10)
});

export const insertEventReportSchema = createInsertSchema(eventReports).omit({
  id: true,
  generatedAt: true,
});



// Types
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;
export type WineEvent = typeof wineEvents.$inferSelect;
export type InsertWineEvent = z.infer<typeof insertWineEventSchema>;
export type Wine = typeof wines.$inferSelect;
export type InsertWine = z.infer<typeof insertWineSchema>;
export type Vote = typeof votes.$inferSelect;
export type InsertVote = z.infer<typeof insertVoteSchema>;
export type EventReport = typeof eventReports.$inferSelect;
export type InsertEventReport = z.infer<typeof insertEventReportSchema>;

// Extended type for results
export interface WineResult extends Wine {
  averageScore: number;
  totalVotes: number;
  lodeCount: number;
  contributor: string;
}

// Report data structure
export interface EventReportData {
  eventInfo: WineEvent;
  userRankings: UserRanking[];
  wineResults: WineResultDetailed[];
  summary: {
    totalParticipants: number;
    totalWines: number;
    totalVotes: number;
    averageScore: number;
  };
}

export interface UserRanking {
  userId: number;
  userName: string;
  totalScore: number;
  averageScore: number;
  votesGiven: number;
  position: number;
}

export interface WineResultDetailed extends WineResult {
  votes: {
    userId: number;
    userName: string;
    score: number;
  }[];
  position: number;
}

================================================================================
FINE CODICE COMPLETO
================================================================================
